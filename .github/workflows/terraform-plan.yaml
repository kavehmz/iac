name: 'Terraform Plan'

on:
  pull_request:
    paths:
      - aws/**

defaults:
  run:
    shell: bash

jobs:
  diffs:
    name: "Check the changes"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - id: set-matrix
      run: |
        git fetch origin main
        X=""
        for i in $(git diff --dirstat=files,0 ..FETCH_HEAD|cut -d'%' -f 2|cut -d' ' -f 2|grep aws)
        do
          X="$X,\"$i\""
          cat << EOF > ${i}/backend.tf
          terraform {
            backend "s3" {
              bucket = "deriv-playground-iac-states"
              key    = "${i}"
              region = "us-east-1"
            }
          }
        EOF
        done
        X="${X:1}"
        echo "matrix={\"dir\":[$X]}" >> $GITHUB_OUTPUT

  terraform:
    needs: diffs
    name: "Check, Verify, Plan"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    strategy:
      matrix: ${{fromJson(needs.diffs.outputs.matrix)}}

    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      working-directory: ${{ matrix.dir }}
      run: terraform init  -no-color
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_READONLY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_READONLY }}

    - name: Terraform fmt
      id: fmt
      working-directory: ${{ matrix.dir }}
      run: terraform fmt -check -diff -no-color

    - name: Terraform Validate
      id: validate
      working-directory: ${{ matrix.dir }}
      run: terraform validate -no-color

    - name: Terraform Plan
      if: github.event.review.state != 'approved' 
      id: plan
      working-directory: ${{ matrix.dir }}
      run: terraform plan -no-color
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_READONLY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_READONLY }}

    - uses: actions/github-script@v6
      if: always()
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `### Dir: ${{ matrix.dir }}
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          <details><summary>Initialization Output</summary>

          \`\`\`\n
          ${{ steps.init.outputs.stdout }}
          ${{ steps.init.outputs.stderr }}
          \`\`\`

          </details>

          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          <details><summary>Format Output</summary>

          \`\`\`\n
          ${{ steps.fmt.outputs.stdout }}
          ${{ steps.fmt.outputs.stderr }}
          \`\`\`

          </details>

          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          ${{ steps.validate.outputs.stderr }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  plan-passed:
    needs: terraform
    name: "Plan passed"
    runs-on: ubuntu-latest

    steps:
    - name: All done
      id: plan-passed
      run: echo "All passed"
